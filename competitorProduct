<template>
    <lightning-card title="Asset Form">
        <div class="form-container">
            <lightning-input class="input-field" label="Brand Name" value={brandName} onchange={handleBrandNameChange}></lightning-input>
            <lightning-input class="input-field" label="Asset Type" value={assetType} onchange={handleAssetTypeChange}></lightning-input>
            <lightning-input class="input-field" label="Asset Name" value={assetName} onchange={handleAssetNameChange}></lightning-input>
            <lightning-input class="input-field" label="Capacity" type="number" value={capacity} onchange={handleCapacityChange}></lightning-input>
            <lightning-input class="input-field" label="Age of Product" type="number" value={ageOfProduct} onchange={handleAgeOfProductChange}></lightning-input>
            <lightning-input class="input-field" label="Manufacturing Date" type="date" value={manufacturingDate} onchange={handleManufacturingDateChange}></lightning-input>
            <input class="file-input" type="file" accept=".jpg, .png" multiple onchange={handleFileChange}></input>
            <lightning-button class="save-button" label="Save" onclick={handleSave} variant="brand"></lightning-button>
        </div>
    </lightning-card>
</template>



.form-container {
    display: flex;
    flex-direction: column;
    padding: 20px;
}

.input-field {
    margin-bottom: 10px;
}

.file-input {
    margin-top: 10px;
    margin-bottom: 10px;
}

.save-button {
    margin-top: 10px;
}


public with sharing class AssetFormController {
    
    @AuraEnabled(cacheable=false)
    public static void saveAsset(String recordId, String brandName, String assetType, String assetName, 
                                 Integer capacity, Integer ageOfProduct, Date manufacturingDate, List<String> fileNames, List<String> fileContents) {
                                     System.debug('AsstRecordID-->' + recordId);
                                     System.debug('AssetName==>' + fileNames);
                                     System.debug('AssetFile==>' + fileContents);
                                     
                                     try {
                                         // Create Asset record with provided Id
                                         Asset asset = new Asset(Id = recordId);
                                         
                                         // Update Asset fields
                                         asset.Brand_Name__c = brandName;
                                         asset.Asset_Type__c = assetType;
                                         asset.Name = assetName;
                                         asset.Capacity__c = capacity;
                                         asset.Age_of_Product__c = ageOfProduct;
                                         asset.Manufacturing_Date__c = manufacturingDate;
                                         update asset;
                                         
                                         // Create lists to hold ContentDocumentLink records
                                         List<ContentDocumentLink> contentDocumentLinks = new List<ContentDocumentLink>();
                                         
                                         // Create ContentVersion records and insert them
                                         List<ContentVersion> contentVersions = new List<ContentVersion>();
                                         for (Integer i = 0; i < fileNames.size(); i++) {
                                             ContentVersion cv = new ContentVersion(
                                                 Title = fileNames[i],
                                                 PathOnClient = fileNames[i],
                                                 VersionData = EncodingUtil.base64Decode(fileContents[i]),
                                                 FirstPublishLocationId = asset.Id
                                             );
                                             contentVersions.add(cv);
                                         }
                                         insert contentVersions;
                                     } catch (Exception e) {
                                         System.debug('errrrorrrr->' + e);
                                         // throw new AuraHandledException(e.getMessage());
                                     }
                                 }
}
